rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isManager() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }

    match /users/{userId} {
      allow read: if request.auth.uid == userId || isManager();
      allow create: if request.auth.uid == userId || isManager();
      allow update: if request.auth.uid == userId || isManager();
      allow delete: if isManager();
    }

    match /sectors/{docId} {
      allow read: if request.auth != null;
      allow write: if isManager();
    }

    match /branches/{docId} {
      allow read: if request.auth != null;
      allow write: if isManager();
    }

    // Regola per i FORNITORI (la collezione si chiama ancora 'channels')
    match /channels/{docId} {
      allow read: if request.auth != null;
      allow write: if isManager();
    }

    // NUOVA REGOLA MANCANTE per i CANALI DI MARKETING
    match /marketing_channels/{docId} {
      allow read: if request.auth != null;
      allow write: if isManager();
    }

    match /channel_categories/{docId} {
      allow read: if request.auth != null;
      allow write: if isManager();
    }
    
    match /geographic_areas/{docId} {
      allow read: if request.auth != null;
      allow write: if isManager();
    }
    
    match /budgets/{docId} {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['manager', 'admin'];
    }

    match /expenses/{expenseId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow update, delete: if isManager() || request.auth.uid == resource.data.authorId;
    }
  }
}